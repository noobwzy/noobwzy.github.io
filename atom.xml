<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wzy&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-18T09:42:35.492Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wzy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java学习（4）</title>
    <link href="http://yoursite.com/2018/12/18/2018%E5%B9%B412%E6%9C%8818/"/>
    <id>http://yoursite.com/2018/12/18/2018年12月18/</id>
    <published>2018-12-18T09:41:39.597Z</published>
    <updated>2018-12-18T09:42:35.492Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年12月18日"><a href="#2018年12月18日" class="headerlink" title="2018年12月18日"></a>2018年12月18日</h5><p>标签：Java学习</p><h2 id="动态绑定和多态："><a href="#动态绑定和多态：" class="headerlink" title="动态绑定和多态："></a>动态绑定和多态：</h2><a id="more"></a><p>动态绑定是指”在执行期间（而非编译期间）”判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。<br>多态存在的条件：</p><ol><li>要有继承。</li><li>要有重写。</li><li>父类引用指向子类对象。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Animal(String name) &#123;<span class="keyword">this</span>.name = name&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫声..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String eyesColor;</span><br><span class="line">    Cat(String n,String c) &#123;<span class="keyword">super</span>(n);eyesColor = c;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"猫叫声..."</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String furColor;</span><br><span class="line">    DOg(String n,String c) &#123;<span class="keyword">super</span>(n);furColor = c;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enjoy</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"狗叫声..."</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lady</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Animal pet;</span><br><span class="line">    Lady(String name,Animal pet)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="keyword">this</span>.pet = pet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPetEnjoy</span><span class="params">()</span></span>&#123;per.enjoy();&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat(<span class="string">"catname"</span>,<span class="string">"blue"</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog(<span class="string">"dogname"</span>,<span class="string">"black"</span>);</span><br><span class="line">        Lady l1 = <span class="keyword">new</span> Lady(<span class="string">"l1"</span>,c);</span><br><span class="line">        Layd l2 = <span class="keyword">new</span> Lady(<span class="string">"l2"</span>,d);</span><br><span class="line">        l1.myPetEnjoy();</span><br><span class="line">        l2.myPetEnjoy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ol><li>用abstract关键字来修饰一个类时，这个类叫作抽象类，用abstract来修饰一个方法时，该方法叫做抽象方法。</li><li>含有抽象方法的类必须被声明为抽象类，抽象类必须被继承，抽象方法必须被重写。</li><li>抽象方法不能被实例化。（不可以new一个抽象类）</li><li>抽象方法只需要声明，而不需要实现。（抽象方法括号内不需要写内容）<h2 id="关键字Final"><a href="#关键字Final" class="headerlink" title="关键字Final"></a>关键字Final</h2></li><li>final变量的值是不能够改变的。</li><li>final的方法不能被重写。</li><li>final的类不能被继承。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;2018年12月18日&quot;&gt;&lt;a href=&quot;#2018年12月18日&quot; class=&quot;headerlink&quot; title=&quot;2018年12月18日&quot;&gt;&lt;/a&gt;2018年12月18日&lt;/h5&gt;&lt;p&gt;标签：Java学习&lt;/p&gt;
&lt;h2 id=&quot;动态绑定和多态：&quot;&gt;&lt;a href=&quot;#动态绑定和多态：&quot; class=&quot;headerlink&quot; title=&quot;动态绑定和多态：&quot;&gt;&lt;/a&gt;动态绑定和多态：&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jdk_api文档查询</title>
    <link href="http://yoursite.com/2018/12/17/2018%E5%B9%B412%E6%9C%8817/"/>
    <id>http://yoursite.com/2018/12/17/2018年12月17/</id>
    <published>2018-12-17T09:30:41.370Z</published>
    <updated>2018-12-17T09:45:32.511Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年12月17日"><a href="#2018年12月17日" class="headerlink" title="2018年12月17日"></a>2018年12月17日</h5><p>标签：jdk_api文档查询</p><h2 id="jdk-api文档查询"><a href="#jdk-api文档查询" class="headerlink" title="jdk_api文档查询"></a>jdk_api文档查询</h2><a id="more"></a><ol><li>首先在输入网址 <a href="http://java.sun.com" target="_blank" rel="noopener">http://java.sun.com</a> 打开然后在Top Downloads下方点击Java SE。</li><li>然后在Downloads 中找Java SE 8 Documentation，找到后点击右侧DOWNLOAD。</li><li>找到JavaFX API Documentation，点击下面的Accept License Agreement，然后开始下载。</li><li>下载成功后解压，打开文件夹api，找到help-doc.html。打开就可以进行查询了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;2018年12月17日&quot;&gt;&lt;a href=&quot;#2018年12月17日&quot; class=&quot;headerlink&quot; title=&quot;2018年12月17日&quot;&gt;&lt;/a&gt;2018年12月17日&lt;/h5&gt;&lt;p&gt;标签：jdk_api文档查询&lt;/p&gt;
&lt;h2 id=&quot;jdk-api文档查询&quot;&gt;&lt;a href=&quot;#jdk-api文档查询&quot; class=&quot;headerlink&quot; title=&quot;jdk_api文档查询&quot;&gt;&lt;/a&gt;jdk_api文档查询&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习（3）</title>
    <link href="http://yoursite.com/2018/12/13/2018%E5%B9%B412%E6%9C%8813%E6%97%A5/"/>
    <id>http://yoursite.com/2018/12/13/2018年12月13日/</id>
    <published>2018-12-13T09:05:07.921Z</published>
    <updated>2018-12-17T09:30:28.792Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年12月17日"><a href="#2018年12月17日" class="headerlink" title="2018年12月17日"></a>2018年12月17日</h5><p>标签：Java学习</p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><a id="more"></a><p>Object类时所有Java类的根基，如果在类的声明中未使用extends关键字指明其父类，则默认父类为Object。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;...&#125;</span><br><span class="line"><span class="comment">//相当于：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure></p><p><strong>所有的类都从Object中继承</strong><br>可以在jdk_api文档中查询Object这个类中都的方法。</p><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><ol><li>Objecr类中定义有public String  toString（）方法，其返回值是String类型，描述当前对象的有关信息。</li><li>在进行String与其他类型数据的连接操作时（如System.out.println（”info”））将自动调用该对象类的toString（）方法。</li><li>推荐在所有类中重写toString（）方法，重写方法时注意复制。<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2></li><li>Object类中定义有equals方法，public boolean equals（Object obj）方法。用来表示定义对象是否“相等”的逻辑方法。</li><li>Object的equals方法定义为:x.equals(y)当x和y是用一个对象的应用时返回true否则返回false。</li><li>J2SDK提供的一些类，如String，Date等，重写了Object的equals方法，调用这些类的equals方法，当x和y所引用的对象是同一类对象且属性内容相等时（并不一定是相同的对象），返回true否则返回false。</li><li>可根据需要在用户自定义类型中重写equals方法。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;2018年12月17日&quot;&gt;&lt;a href=&quot;#2018年12月17日&quot; class=&quot;headerlink&quot; title=&quot;2018年12月17日&quot;&gt;&lt;/a&gt;2018年12月17日&lt;/h5&gt;&lt;p&gt;标签：Java学习&lt;/p&gt;
&lt;h2 id=&quot;Object&quot;&gt;&lt;a href=&quot;#Object&quot; class=&quot;headerlink&quot; title=&quot;Object&quot;&gt;&lt;/a&gt;Object&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习（2）</title>
    <link href="http://yoursite.com/2018/12/11/2018%E5%B9%B412%E6%9C%8811%E6%97%A5/"/>
    <id>http://yoursite.com/2018/12/11/2018年12月11日/</id>
    <published>2018-12-11T06:33:03.255Z</published>
    <updated>2018-12-17T09:48:58.975Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年12月11日"><a href="#2018年12月11日" class="headerlink" title="2018年12月11日"></a>2018年12月11日</h5><p>标签：Java学习</p><hr><h2 id="继承中的构造方法"><a href="#继承中的构造方法" class="headerlink" title="继承中的构造方法"></a>继承中的构造方法</h2><a id="more"></a><ol><li>子类的构造过程中必须调用其父类的构造方法。</li><li>子类可以在自己的构造方法中使用super（argument_XX）调用父类的构造方法。<br>使用this（argument_XX）调用本类的另外构造方法。<br>如果使用super必须写在子类构造方法的第一行。</li><li>如果子类的构造方法中没有显示的调用父类的构造方法，则系统默认调用父类无参数的构造方法，如果父类构造方法中没有无参数构造方法，则编译出错。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    SuperClass()&#123; </span><br><span class="line">        System.out.println(<span class="string">"SuperClass()"</span>);</span><br><span class="line">    &#125;<span class="comment">//构造方法。</span></span><br><span class="line">    SuperClass(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        System.out.println(<span class="string">"SuperClass("</span>+ n +<span class="string">")"</span>);</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;<span class="comment">//重载的构造方法。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    SubClass(<span class="keyword">int</span> n)&#123;</span><br><span class="line">        System.out.println(<span class="string">"SubClass("</span> + n + <span class="string">")"</span>);</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">    SubClass()&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">300</span>);<span class="comment">//必须写在第一行，否则编译出错。</span></span><br><span class="line">        System.out.println(<span class="string">"SubClsaa()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       SubClass s1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">       SubClass s2 = <span class="keyword">new</span> SubClass(<span class="number">400</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1544519921258&amp;di=592773bc830e5811e0c47b0cc79011b0&amp;imgtype=0&amp;src=http://s10.sinaimg.cn/mw690/006kFhg2zy7bwSbie2Rc9&amp;690" alt=""></p><p>  this是对当前子类对象Valuer的引用，而super则是对子类中父类对象Valuer的引用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;2018年12月11日&quot;&gt;&lt;a href=&quot;#2018年12月11日&quot; class=&quot;headerlink&quot; title=&quot;2018年12月11日&quot;&gt;&lt;/a&gt;2018年12月11日&lt;/h5&gt;&lt;p&gt;标签：Java学习&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;继承中的构造方法&quot;&gt;&lt;a href=&quot;#继承中的构造方法&quot; class=&quot;headerlink&quot; title=&quot;继承中的构造方法&quot;&gt;&lt;/a&gt;继承中的构造方法&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习（1）</title>
    <link href="http://yoursite.com/2018/12/04/2018%E5%B9%B412%E6%9C%884%E6%97%A5/"/>
    <id>http://yoursite.com/2018/12/04/2018年12月4日/</id>
    <published>2018-12-04T06:47:41.150Z</published>
    <updated>2018-12-17T09:49:01.207Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年12月4日"><a href="#2018年12月4日" class="headerlink" title="2018年12月4日"></a>2018年12月4日</h5><p>标签：Java学习</p><hr><p>Java中的权限修饰符用于修饰类中的成员变量或修饰类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="private"><a href="#private" class="headerlink" title="private:"></a>private:</h2><p>修饰成员变量name，代表此成员变量只能在Cat这个类中进行访问，在子类中能被继承，但无法进行访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> Age;</span><br><span class="line">            String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="default"><a href="#default" class="headerlink" title="default:"></a>default:</h2><p>代表name这个成员变量，在类内部和同一个包下面的类中都可以进行访问。同时也用了default修饰了Cat这个类。<br><strong>在使用default修饰类或成员变量时不需在前面写出default</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="protected"><a href="#protected" class="headerlink" title="protected:"></a>protected:</h2><p>修饰成员变量name，表示name可在类的内部访问，同一个包下面可以进行访问，同时在子类中也可以进行访问。</p><h2 id="public："><a href="#public：" class="headerlink" title="public："></a>public：</h2><p>在任何地方，都可以进行访问。<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1543916002066&amp;di=ec9ec28d648ddcd913bbe8d6d00a13f5&amp;imgtype=0&amp;src=http://pic002.cnblogs.com/images/2011/99057/2011101016262680.jpg" alt="此处输入图片的描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;2018年12月4日&quot;&gt;&lt;a href=&quot;#2018年12月4日&quot; class=&quot;headerlink&quot; title=&quot;2018年12月4日&quot;&gt;&lt;/a&gt;2018年12月4日&lt;/h5&gt;&lt;p&gt;标签：Java学习&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Java中的权限修饰符用于修饰类中的成员变量或修饰类。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cat&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习</title>
    <link href="http://yoursite.com/2018/11/29/2018%E5%B9%B411%E6%9C%8829%E6%97%A5/"/>
    <id>http://yoursite.com/2018/11/29/2018年11月29日/</id>
    <published>2018-11-29T07:31:27.300Z</published>
    <updated>2018-12-04T06:54:16.805Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年11月29日"><a href="#2018年11月29日" class="headerlink" title="2018年11月29日"></a>2018年11月29日</h5><p>标签：Java学习</p><hr><p>java中两个关键字的使用：</p><h1 id="package"><a href="#package" class="headerlink" title="package"></a>package</h1><p>1 package用于存放类，必须写在源代码第一行，包可加很多层例如package com这是一层，package com.baidu这是两层，代表首先包了baidu，然后包了com。（约定俗成，包的起名用你所在公司的域名）<br>2 编译出来的类（class文件）必须位于正确的目录下面，例如 package com.baidu.wzy，里面封装的类一定要存放在，com文件夹→baidu→wzy文件夹中。<br>3 如果要在另一个类中调用package com.baidu.wzy中的类，必须要把名字写全了。例：com.baidu.wzy.cat c = new com.baidu.wzy.cat（）；</p><h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><p>1 引入语句，在类的第一行中输入 inport com.baidu.wzy.cat，即可在此类中直接输入 cat c = new cat（），<br>因为在此类中已经引入了 com.baidu.wzy.cat这个类，所以不用在全部打出（如果输入inport com.baidu.wzy.*，则代表引入文件夹（也就是包中）中所有类）。<br>2 引入是源代码文件可能产生影响（.java文件），可以将该文件删除，或者转移至其他目录下。</p><h1 id="访问同一个包下面的类，不需要引入。在执行类时，也要把包名写全，如javac-com-baidu-wzy-cat-java。"><a href="#访问同一个包下面的类，不需要引入。在执行类时，也要把包名写全，如javac-com-baidu-wzy-cat-java。" class="headerlink" title="访问同一个包下面的类，不需要引入。在执行类时，也要把包名写全，如javac com.baidu.wzy.cat.java。"></a>访问同一个包下面的类，不需要引入。在执行类时，也要把包名写全，如javac com.baidu.wzy.cat.java。</h1><p><strong>执行类时如找不到，不符时，检查classprth</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;2018年11月29日&quot;&gt;&lt;a href=&quot;#2018年11月29日&quot; class=&quot;headerlink&quot; title=&quot;2018年11月29日&quot;&gt;&lt;/a&gt;2018年11月29日&lt;/h5&gt;&lt;p&gt;标签：Java学习&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;java中两个关键字的使
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java学习</title>
    <link href="http://yoursite.com/2018/11/26/2018%E5%B9%B411%E6%9C%8826%E6%97%A5/"/>
    <id>http://yoursite.com/2018/11/26/2018年11月26日/</id>
    <published>2018-11-26T12:56:41.779Z</published>
    <updated>2018-11-28T07:50:58.838Z</updated>
    
    <content type="html"><![CDATA[<h5 id="2018年11月26日"><a href="#2018年11月26日" class="headerlink" title="2018年11月26日"></a>2018年11月26日</h5><p>标签（空格分隔）： Java学习</p><hr><p>java中两个关键字的使用：</p><h1 id="this"><a href="#this" class="headerlink" title="this:"></a>this:</h1><ol><li>在类的方法定义中使用的 this 关键字代表使用该方法的对象的引用。</li><li>当必须指出当前使用方法对象是谁时要使用this。</li><li>有时使用this可以处理方法中成员变量和参数重名的情况。</li><li>this可以看作是一个变量，他的值是当前对象的引用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testThis</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">testThis(<span class="keyword">int</span> i)&#123;</span><br><span class="line"><span class="keyword">this</span>.i = i;</span><br><span class="line">&#125;<span class="comment">//当你确定不了一个参数指定的是哪个变量的时候，找距离最近得声明，就近声明原则。</span></span><br><span class="line"><span class="function">testThis <span class="title">increamen</span><span class="params">()</span></span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"i = "</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">testThis leaf = <span class="keyword">new</span> testThis(<span class="number">100</span>);</span><br><span class="line">leaf.increamen().increamen().print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="你在对哪个对象来调用this时this指的就是那个对象，this是一个引用，它指向自身的对象。"><a href="#你在对哪个对象来调用this时this指的就是那个对象，this是一个引用，它指向自身的对象。" class="headerlink" title="你在对哪个对象来调用this时this指的就是那个对象，this是一个引用，它指向自身的对象。"></a>你在对哪个对象来调用this时this指的就是那个对象，this是一个引用，它指向自身的对象。</h2><h1 id="static："><a href="#static：" class="headerlink" title="static："></a>static：</h1><ol><li>在类中，用static声明的成员变量为静态成员变量，它为该类的功用变量，在第一次使用时被初始化，对于该类的所有对象来说，static的成员变量只有一份。</li><li>用static声明的方法为静态方法，在调用该方法是，不会将对象的引用传递给它，所以在static方法中不可访问非static成员。（静态方法不再是针对于某个对象的调用，所以不能访问非静态成员）。</li><li>可以通过对象引用或类名（不需要实例化）访问静态成员。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">Cat(String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">id = sid++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"My name is "</span>+name+<span class="string">" No."</span>+id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Cat.sid = <span class="number">0</span>;</span><br><span class="line">Cat mimi = <span class="keyword">new</span> Cat(<span class="string">"mimi"</span>);</span><br><span class="line">Cat pipi = <span class="keyword">new</span> Cat(<span class="string">"pipi"</span>);</span><br><span class="line">mimi.info();</span><br><span class="line">pipi.info();</span><br><span class="line"><span class="comment">//在静态的方法中不需要new一个对象出来就可以运行，所以不可调用非静态变量。</span></span><br><span class="line"><span class="comment">//所以在成员变量前面加static就可以被调用。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态的方法针对某一个对象来调用，而静态的方法不针对某一个对象可直接调用，例如：xxx-（一个静态的方法）不需要写入一个对象的名字即可调用。"><a href="#动态的方法针对某一个对象来调用，而静态的方法不针对某一个对象可直接调用，例如：xxx-（一个静态的方法）不需要写入一个对象的名字即可调用。" class="headerlink" title="动态的方法针对某一个对象来调用，而静态的方法不针对某一个对象可直接调用，例如：xxx.（一个静态的方法）不需要写入一个对象的名字即可调用。"></a>动态的方法针对某一个对象来调用，而静态的方法不针对某一个对象可直接调用，例如：xxx.（一个静态的方法）不需要写入一个对象的名字即可调用。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;2018年11月26日&quot;&gt;&lt;a href=&quot;#2018年11月26日&quot; class=&quot;headerlink&quot; title=&quot;2018年11月26日&quot;&gt;&lt;/a&gt;2018年11月26日&lt;/h5&gt;&lt;p&gt;标签（空格分隔）： Java学习&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;java中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/25/no1/"/>
    <id>http://yoursite.com/2018/11/25/no1/</id>
    <published>2018-11-25T15:06:07.917Z</published>
    <updated>2018-11-25T15:30:06.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Test-to-write-blog"><a href="#Test-to-write-blog" class="headerlink" title="Test to write blog"></a>Test to write blog</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Continue</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i % f == <span class="number">0</span>)&#123;</span><br><span class="line">z++;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(z == f)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Test-to-write-blog&quot;&gt;&lt;a href=&quot;#Test-to-write-blog&quot; class=&quot;headerlink&quot; title=&quot;Test to write blog&quot;&gt;&lt;/a&gt;Test to write blog&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/25/hello-world/"/>
    <id>http://yoursite.com/2018/11/25/hello-world/</id>
    <published>2018-11-25T14:31:36.481Z</published>
    <updated>2018-11-25T14:31:36.481Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
